#!/usr/bin/env node

/**
 * Test Environment Setup Script
 * Automatically configures the testing environment with proper dependencies
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Colors for console output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkEnvironment() {
  log('üîç Checking test environment...', 'blue');

  const isWSL = !!process.env.WSL_DISTRO_NAME;
  const isCI = !!process.env.CI;
  const hasDisplay = !!process.env.DISPLAY;

  log(`   WSL Environment: ${isWSL ? 'Yes' : 'No'}`);
  log(`   CI Environment: ${isCI ? 'Yes' : 'No'}`);
  log(`   Display Available: ${hasDisplay ? 'Yes' : 'No'}`);

  return { isWSL, isCI, hasDisplay };
}

function installPlaywrightBrowsers() {
  log('üì• Installing Playwright browsers...', 'blue');

  try {
    execSync('npx playwright install', { stdio: 'inherit' });
    log('‚úÖ Playwright browsers installed successfully', 'green');
  } catch (error) {
    log('‚ö†Ô∏è  Playwright browser installation failed, continuing...', 'yellow');
  }
}

function installSystemDependencies() {
  log('üîß Installing system dependencies...', 'blue');

  try {
    // Try to install dependencies - may require sudo
    execSync('npx playwright install-deps', { stdio: 'inherit' });
    log('‚úÖ System dependencies installed successfully', 'green');
  } catch (error) {
    log('‚ö†Ô∏è  System dependencies installation failed', 'yellow');
    log('   This is common in WSL/restricted environments', 'yellow');
    log('   Tests will automatically use headless mode', 'yellow');
  }
}

function createEnvFile() {
  const envPath = path.join(process.cwd(), '.env.test.local');

  if (!fs.existsSync(envPath)) {
    log('üìù Creating test environment file...', 'blue');

    const envContent = `# Test Environment Configuration
# Generated by setup-test-env.js

# Test server configuration
TEST_PORT=8788
TEST_BASE_URL=http://localhost:8788

# Force headless mode (set to false for debugging)
TEST_HEADED=false

# Test timeout settings
TEST_TIMEOUT=30000
`;

    fs.writeFileSync(envPath, envContent);
    log('‚úÖ Test environment file created', 'green');
  } else {
    log('üìÑ Test environment file already exists', 'blue');
  }
}

function validateSetup() {
  log('üß™ Validating test setup...', 'blue');

  const playwrightConfigPath = path.join(process.cwd(), 'playwright.config.ts');
  const testsPath = path.join(process.cwd(), 'tests');

  if (!fs.existsSync(playwrightConfigPath)) {
    log('‚ùå playwright.config.ts not found', 'red');
    process.exit(1);
  }

  if (!fs.existsSync(testsPath)) {
    log('‚ùå tests directory not found', 'red');
    process.exit(1);
  }

  log('‚úÖ Test configuration validated', 'green');
}

function main() {
  log('üöÄ Setting up test environment for Amway Image Generator', 'green');
  log('='.repeat(60), 'blue');

  const env = checkEnvironment();

  validateSetup();
  createEnvFile();
  installPlaywrightBrowsers();

  // Only try to install system deps if not in CI
  if (!env.isCI) {
    installSystemDependencies();
  }

  log('='.repeat(60), 'blue');
  log('‚úÖ Test environment setup complete!', 'green');
  log('');
  log('üìö Available test commands:', 'blue');
  log('   npm run test         - Run all tests');
  log('   npm run test:ui      - Run tests with UI');
  log('   npm run test:headed  - Run tests with browser UI');
  log('   npm run test:dev     - Run tests against dev server');
  log('');

  if (env.isWSL || !env.hasDisplay) {
    log('üí° Note: Tests will run in headless mode due to environment', 'yellow');
  }
}

if (require.main === module) {
  main();
}

module.exports = { checkEnvironment, validateSetup };